//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("RiftDataDataModel", "FK_Fish_Genus", "Genus", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(RiftData.Infrastructure.Data.Genus), "Fish", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(RiftData.Infrastructure.Data.Fish), true)]
[assembly: EdmRelationshipAttribute("RiftDataDataModel", "FK_Fish_Locale", "Locale", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(RiftData.Infrastructure.Data.Locale), "Fish", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(RiftData.Infrastructure.Data.Fish), true)]
[assembly: EdmRelationshipAttribute("RiftDataDataModel", "FK_Fish_Species", "Species", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(RiftData.Infrastructure.Data.Species), "Fish", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(RiftData.Infrastructure.Data.Fish), true)]
[assembly: EdmRelationshipAttribute("RiftDataDataModel", "FK_Species_Genus", "Genus", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(RiftData.Infrastructure.Data.Genus), "Species", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(RiftData.Infrastructure.Data.Species), true)]
[assembly: EdmRelationshipAttribute("RiftDataDataModel", "FK_Genus_Type", "Type", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(RiftData.Infrastructure.Data.Type), "Genus", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(RiftData.Infrastructure.Data.Genus), true)]

#endregion

namespace RiftData.Infrastructure.Data
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class RiftDataDataEntities : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new RiftDataDataEntities object using the connection string found in the 'RiftDataDataEntities' section of the application configuration file.
        /// </summary>
        public RiftDataDataEntities() : base("name=RiftDataDataEntities", "RiftDataDataEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new RiftDataDataEntities object.
        /// </summary>
        public RiftDataDataEntities(string connectionString) : base(connectionString, "RiftDataDataEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new RiftDataDataEntities object.
        /// </summary>
        public RiftDataDataEntities(EntityConnection connection) : base(connection, "RiftDataDataEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Fish> Fish
        {
            get
            {
                if ((_Fish == null))
                {
                    _Fish = base.CreateObjectSet<Fish>("Fish");
                }
                return _Fish;
            }
        }
        private ObjectSet<Fish> _Fish;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Genus> Genus
        {
            get
            {
                if ((_Genus == null))
                {
                    _Genus = base.CreateObjectSet<Genus>("Genus");
                }
                return _Genus;
            }
        }
        private ObjectSet<Genus> _Genus;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Locale> Locale
        {
            get
            {
                if ((_Locale == null))
                {
                    _Locale = base.CreateObjectSet<Locale>("Locale");
                }
                return _Locale;
            }
        }
        private ObjectSet<Locale> _Locale;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Photos> Photos
        {
            get
            {
                if ((_Photos == null))
                {
                    _Photos = base.CreateObjectSet<Photos>("Photos");
                }
                return _Photos;
            }
        }
        private ObjectSet<Photos> _Photos;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Species> Species
        {
            get
            {
                if ((_Species == null))
                {
                    _Species = base.CreateObjectSet<Species>("Species");
                }
                return _Species;
            }
        }
        private ObjectSet<Species> _Species;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Type> Type
        {
            get
            {
                if ((_Type == null))
                {
                    _Type = base.CreateObjectSet<Type>("Type");
                }
                return _Type;
            }
        }
        private ObjectSet<Type> _Type;

        #endregion
        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Fish EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToFish(Fish fish)
        {
            base.AddObject("Fish", fish);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Genus EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToGenus(Genus genus)
        {
            base.AddObject("Genus", genus);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Locale EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToLocale(Locale locale)
        {
            base.AddObject("Locale", locale);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Photos EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToPhotos(Photos photos)
        {
            base.AddObject("Photos", photos);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Species EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToSpecies(Species species)
        {
            base.AddObject("Species", species);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Type EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToType(Type type)
        {
            base.AddObject("Type", type);
        }

        #endregion
    }
    

    #endregion
    
    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="RiftDataDataModel", Name="Fish")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Fish : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Fish object.
        /// </summary>
        /// <param name="fishID">Initial value of the FishID property.</param>
        /// <param name="genus">Initial value of the Genus property.</param>
        /// <param name="species">Initial value of the Species property.</param>
        /// <param name="locale">Initial value of the Locale property.</param>
        /// <param name="temperament">Initial value of the Temperament property.</param>
        /// <param name="size">Initial value of the Size property.</param>
        public static Fish CreateFish(global::System.Int32 fishID, global::System.Int32 genus, global::System.Int32 species, global::System.Int32 locale, global::System.Int32 temperament, global::System.Int32 size)
        {
            Fish fish = new Fish();
            fish.FishID = fishID;
            fish.Genus = genus;
            fish.Species = species;
            fish.Locale = locale;
            fish.Temperament = temperament;
            fish.Size = size;
            return fish;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 FishID
        {
            get
            {
                return _FishID;
            }
            set
            {
                if (_FishID != value)
                {
                    OnFishIDChanging(value);
                    ReportPropertyChanging("FishID");
                    _FishID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("FishID");
                    OnFishIDChanged();
                }
            }
        }
        private global::System.Int32 _FishID;
        partial void OnFishIDChanging(global::System.Int32 value);
        partial void OnFishIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Genus
        {
            get
            {
                return _Genus;
            }
            set
            {
                OnGenusChanging(value);
                ReportPropertyChanging("Genus");
                _Genus = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Genus");
                OnGenusChanged();
            }
        }
        private global::System.Int32 _Genus;
        partial void OnGenusChanging(global::System.Int32 value);
        partial void OnGenusChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Species
        {
            get
            {
                return _Species;
            }
            set
            {
                OnSpeciesChanging(value);
                ReportPropertyChanging("Species");
                _Species = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Species");
                OnSpeciesChanged();
            }
        }
        private global::System.Int32 _Species;
        partial void OnSpeciesChanging(global::System.Int32 value);
        partial void OnSpeciesChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Locale
        {
            get
            {
                return _Locale;
            }
            set
            {
                OnLocaleChanging(value);
                ReportPropertyChanging("Locale");
                _Locale = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Locale");
                OnLocaleChanged();
            }
        }
        private global::System.Int32 _Locale;
        partial void OnLocaleChanging(global::System.Int32 value);
        partial void OnLocaleChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Temperament
        {
            get
            {
                return _Temperament;
            }
            set
            {
                OnTemperamentChanging(value);
                ReportPropertyChanging("Temperament");
                _Temperament = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Temperament");
                OnTemperamentChanged();
            }
        }
        private global::System.Int32 _Temperament;
        partial void OnTemperamentChanging(global::System.Int32 value);
        partial void OnTemperamentChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Size
        {
            get
            {
                return _Size;
            }
            set
            {
                OnSizeChanging(value);
                ReportPropertyChanging("Size");
                _Size = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Size");
                OnSizeChanged();
            }
        }
        private global::System.Int32 _Size;
        partial void OnSizeChanging(global::System.Int32 value);
        partial void OnSizeChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RiftDataDataModel", "FK_Fish_Genus", "Genus")]
        public Genus Genus1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Genus>("RiftDataDataModel.FK_Fish_Genus", "Genus").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Genus>("RiftDataDataModel.FK_Fish_Genus", "Genus").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Genus> Genus1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Genus>("RiftDataDataModel.FK_Fish_Genus", "Genus");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Genus>("RiftDataDataModel.FK_Fish_Genus", "Genus", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RiftDataDataModel", "FK_Fish_Locale", "Locale")]
        public Locale Locale1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Locale>("RiftDataDataModel.FK_Fish_Locale", "Locale").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Locale>("RiftDataDataModel.FK_Fish_Locale", "Locale").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Locale> Locale1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Locale>("RiftDataDataModel.FK_Fish_Locale", "Locale");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Locale>("RiftDataDataModel.FK_Fish_Locale", "Locale", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RiftDataDataModel", "FK_Fish_Species", "Species")]
        public Species Species1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Species>("RiftDataDataModel.FK_Fish_Species", "Species").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Species>("RiftDataDataModel.FK_Fish_Species", "Species").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Species> Species1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Species>("RiftDataDataModel.FK_Fish_Species", "Species");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Species>("RiftDataDataModel.FK_Fish_Species", "Species", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="RiftDataDataModel", Name="Genus")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Genus : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Genus object.
        /// </summary>
        /// <param name="genusID">Initial value of the GenusID property.</param>
        /// <param name="genusName">Initial value of the GenusName property.</param>
        /// <param name="genusType">Initial value of the GenusType property.</param>
        public static Genus CreateGenus(global::System.Int32 genusID, global::System.String genusName, global::System.Int32 genusType)
        {
            Genus genus = new Genus();
            genus.GenusID = genusID;
            genus.GenusName = genusName;
            genus.GenusType = genusType;
            return genus;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 GenusID
        {
            get
            {
                return _GenusID;
            }
            set
            {
                if (_GenusID != value)
                {
                    OnGenusIDChanging(value);
                    ReportPropertyChanging("GenusID");
                    _GenusID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("GenusID");
                    OnGenusIDChanged();
                }
            }
        }
        private global::System.Int32 _GenusID;
        partial void OnGenusIDChanging(global::System.Int32 value);
        partial void OnGenusIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String GenusName
        {
            get
            {
                return _GenusName;
            }
            set
            {
                OnGenusNameChanging(value);
                ReportPropertyChanging("GenusName");
                _GenusName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("GenusName");
                OnGenusNameChanged();
            }
        }
        private global::System.String _GenusName;
        partial void OnGenusNameChanging(global::System.String value);
        partial void OnGenusNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 GenusType
        {
            get
            {
                return _GenusType;
            }
            set
            {
                OnGenusTypeChanging(value);
                ReportPropertyChanging("GenusType");
                _GenusType = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("GenusType");
                OnGenusTypeChanged();
            }
        }
        private global::System.Int32 _GenusType;
        partial void OnGenusTypeChanging(global::System.Int32 value);
        partial void OnGenusTypeChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RiftDataDataModel", "FK_Fish_Genus", "Fish")]
        public EntityCollection<Fish> Fish
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Fish>("RiftDataDataModel.FK_Fish_Genus", "Fish");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Fish>("RiftDataDataModel.FK_Fish_Genus", "Fish", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RiftDataDataModel", "FK_Species_Genus", "Species")]
        public EntityCollection<Species> Species
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Species>("RiftDataDataModel.FK_Species_Genus", "Species");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Species>("RiftDataDataModel.FK_Species_Genus", "Species", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RiftDataDataModel", "FK_Genus_Type", "Type")]
        public Type Type
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Type>("RiftDataDataModel.FK_Genus_Type", "Type").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Type>("RiftDataDataModel.FK_Genus_Type", "Type").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Type> TypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Type>("RiftDataDataModel.FK_Genus_Type", "Type");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Type>("RiftDataDataModel.FK_Genus_Type", "Type", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="RiftDataDataModel", Name="Locale")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Locale : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Locale object.
        /// </summary>
        /// <param name="localeID">Initial value of the LocaleID property.</param>
        /// <param name="lat">Initial value of the Lat property.</param>
        /// <param name="long">Initial value of the Long property.</param>
        /// <param name="localeName">Initial value of the LocaleName property.</param>
        /// <param name="zoomLevel">Initial value of the ZoomLevel property.</param>
        public static Locale CreateLocale(global::System.Int32 localeID, global::System.Double lat, global::System.Double @long, global::System.String localeName, global::System.Int32 zoomLevel)
        {
            Locale locale = new Locale();
            locale.LocaleID = localeID;
            locale.Lat = lat;
            locale.Long = @long;
            locale.LocaleName = localeName;
            locale.ZoomLevel = zoomLevel;
            return locale;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 LocaleID
        {
            get
            {
                return _LocaleID;
            }
            set
            {
                if (_LocaleID != value)
                {
                    OnLocaleIDChanging(value);
                    ReportPropertyChanging("LocaleID");
                    _LocaleID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("LocaleID");
                    OnLocaleIDChanged();
                }
            }
        }
        private global::System.Int32 _LocaleID;
        partial void OnLocaleIDChanging(global::System.Int32 value);
        partial void OnLocaleIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double Lat
        {
            get
            {
                return _Lat;
            }
            set
            {
                OnLatChanging(value);
                ReportPropertyChanging("Lat");
                _Lat = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Lat");
                OnLatChanged();
            }
        }
        private global::System.Double _Lat;
        partial void OnLatChanging(global::System.Double value);
        partial void OnLatChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double Long
        {
            get
            {
                return _Long;
            }
            set
            {
                OnLongChanging(value);
                ReportPropertyChanging("Long");
                _Long = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Long");
                OnLongChanged();
            }
        }
        private global::System.Double _Long;
        partial void OnLongChanging(global::System.Double value);
        partial void OnLongChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String LocaleName
        {
            get
            {
                return _LocaleName;
            }
            set
            {
                OnLocaleNameChanging(value);
                ReportPropertyChanging("LocaleName");
                _LocaleName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("LocaleName");
                OnLocaleNameChanged();
            }
        }
        private global::System.String _LocaleName;
        partial void OnLocaleNameChanging(global::System.String value);
        partial void OnLocaleNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ZoomLevel
        {
            get
            {
                return _ZoomLevel;
            }
            set
            {
                OnZoomLevelChanging(value);
                ReportPropertyChanging("ZoomLevel");
                _ZoomLevel = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ZoomLevel");
                OnZoomLevelChanged();
            }
        }
        private global::System.Int32 _ZoomLevel;
        partial void OnZoomLevelChanging(global::System.Int32 value);
        partial void OnZoomLevelChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RiftDataDataModel", "FK_Fish_Locale", "Fish")]
        public EntityCollection<Fish> Fish
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Fish>("RiftDataDataModel.FK_Fish_Locale", "Fish");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Fish>("RiftDataDataModel.FK_Fish_Locale", "Fish", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="RiftDataDataModel", Name="Photos")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Photos : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Photos object.
        /// </summary>
        /// <param name="id">Initial value of the ID property.</param>
        /// <param name="url">Initial value of the Url property.</param>
        public static Photos CreatePhotos(global::System.Int32 id, global::System.String url)
        {
            Photos photos = new Photos();
            photos.ID = id;
            photos.Url = url;
            return photos;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Url
        {
            get
            {
                return _Url;
            }
            set
            {
                OnUrlChanging(value);
                ReportPropertyChanging("Url");
                _Url = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Url");
                OnUrlChanged();
            }
        }
        private global::System.String _Url;
        partial void OnUrlChanging(global::System.String value);
        partial void OnUrlChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> FishId
        {
            get
            {
                return _FishId;
            }
            set
            {
                OnFishIdChanging(value);
                ReportPropertyChanging("FishId");
                _FishId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FishId");
                OnFishIdChanged();
            }
        }
        private Nullable<global::System.Int32> _FishId;
        partial void OnFishIdChanging(Nullable<global::System.Int32> value);
        partial void OnFishIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> LocaleId
        {
            get
            {
                return _LocaleId;
            }
            set
            {
                OnLocaleIdChanging(value);
                ReportPropertyChanging("LocaleId");
                _LocaleId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LocaleId");
                OnLocaleIdChanged();
            }
        }
        private Nullable<global::System.Int32> _LocaleId;
        partial void OnLocaleIdChanging(Nullable<global::System.Int32> value);
        partial void OnLocaleIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Sponsor
        {
            get
            {
                return _Sponsor;
            }
            set
            {
                OnSponsorChanging(value);
                ReportPropertyChanging("Sponsor");
                _Sponsor = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Sponsor");
                OnSponsorChanged();
            }
        }
        private global::System.String _Sponsor;
        partial void OnSponsorChanging(global::System.String value);
        partial void OnSponsorChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String FlickrId
        {
            get
            {
                return _FlickrId;
            }
            set
            {
                OnFlickrIdChanging(value);
                ReportPropertyChanging("FlickrId");
                _FlickrId = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("FlickrId");
                OnFlickrIdChanged();
            }
        }
        private global::System.String _FlickrId;
        partial void OnFlickrIdChanging(global::System.String value);
        partial void OnFlickrIdChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="RiftDataDataModel", Name="Species")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Species : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Species object.
        /// </summary>
        /// <param name="speciesID">Initial value of the SpeciesID property.</param>
        /// <param name="speciesName">Initial value of the SpeciesName property.</param>
        /// <param name="genus">Initial value of the Genus property.</param>
        public static Species CreateSpecies(global::System.Int32 speciesID, global::System.String speciesName, global::System.Int32 genus)
        {
            Species species = new Species();
            species.SpeciesID = speciesID;
            species.SpeciesName = speciesName;
            species.Genus = genus;
            return species;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 SpeciesID
        {
            get
            {
                return _SpeciesID;
            }
            set
            {
                if (_SpeciesID != value)
                {
                    OnSpeciesIDChanging(value);
                    ReportPropertyChanging("SpeciesID");
                    _SpeciesID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("SpeciesID");
                    OnSpeciesIDChanged();
                }
            }
        }
        private global::System.Int32 _SpeciesID;
        partial void OnSpeciesIDChanging(global::System.Int32 value);
        partial void OnSpeciesIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String SpeciesName
        {
            get
            {
                return _SpeciesName;
            }
            set
            {
                OnSpeciesNameChanging(value);
                ReportPropertyChanging("SpeciesName");
                _SpeciesName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("SpeciesName");
                OnSpeciesNameChanged();
            }
        }
        private global::System.String _SpeciesName;
        partial void OnSpeciesNameChanging(global::System.String value);
        partial void OnSpeciesNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Genus
        {
            get
            {
                return _Genus;
            }
            set
            {
                OnGenusChanging(value);
                ReportPropertyChanging("Genus");
                _Genus = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Genus");
                OnGenusChanged();
            }
        }
        private global::System.Int32 _Genus;
        partial void OnGenusChanging(global::System.Int32 value);
        partial void OnGenusChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Described
        {
            get
            {
                return _Described;
            }
            set
            {
                OnDescribedChanging(value);
                ReportPropertyChanging("Described");
                _Described = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Described");
                OnDescribedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Described;
        partial void OnDescribedChanging(Nullable<global::System.Boolean> value);
        partial void OnDescribedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Paper
        {
            get
            {
                return _Paper;
            }
            set
            {
                OnPaperChanging(value);
                ReportPropertyChanging("Paper");
                _Paper = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Paper");
                OnPaperChanged();
            }
        }
        private Nullable<global::System.Int32> _Paper;
        partial void OnPaperChanging(Nullable<global::System.Int32> value);
        partial void OnPaperChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Distribution
        {
            get
            {
                return _Distribution;
            }
            set
            {
                OnDistributionChanging(value);
                ReportPropertyChanging("Distribution");
                _Distribution = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Distribution");
                OnDistributionChanged();
            }
        }
        private Nullable<global::System.Int32> _Distribution;
        partial void OnDistributionChanging(Nullable<global::System.Int32> value);
        partial void OnDistributionChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RiftDataDataModel", "FK_Fish_Species", "Fish")]
        public EntityCollection<Fish> Fish
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Fish>("RiftDataDataModel.FK_Fish_Species", "Fish");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Fish>("RiftDataDataModel.FK_Fish_Species", "Fish", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RiftDataDataModel", "FK_Species_Genus", "Genus")]
        public Genus Genu
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Genus>("RiftDataDataModel.FK_Species_Genus", "Genus").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Genus>("RiftDataDataModel.FK_Species_Genus", "Genus").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Genus> GenuReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Genus>("RiftDataDataModel.FK_Species_Genus", "Genus");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Genus>("RiftDataDataModel.FK_Species_Genus", "Genus", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="RiftDataDataModel", Name="Type")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Type : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Type object.
        /// </summary>
        /// <param name="genusTypeID">Initial value of the GenusTypeID property.</param>
        /// <param name="genusTypeName">Initial value of the GenusTypeName property.</param>
        public static Type CreateType(global::System.Int32 genusTypeID, global::System.String genusTypeName)
        {
            Type type = new Type();
            type.GenusTypeID = genusTypeID;
            type.GenusTypeName = genusTypeName;
            return type;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 GenusTypeID
        {
            get
            {
                return _GenusTypeID;
            }
            set
            {
                if (_GenusTypeID != value)
                {
                    OnGenusTypeIDChanging(value);
                    ReportPropertyChanging("GenusTypeID");
                    _GenusTypeID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("GenusTypeID");
                    OnGenusTypeIDChanged();
                }
            }
        }
        private global::System.Int32 _GenusTypeID;
        partial void OnGenusTypeIDChanging(global::System.Int32 value);
        partial void OnGenusTypeIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String GenusTypeName
        {
            get
            {
                return _GenusTypeName;
            }
            set
            {
                OnGenusTypeNameChanging(value);
                ReportPropertyChanging("GenusTypeName");
                _GenusTypeName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("GenusTypeName");
                OnGenusTypeNameChanged();
            }
        }
        private global::System.String _GenusTypeName;
        partial void OnGenusTypeNameChanging(global::System.String value);
        partial void OnGenusTypeNameChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RiftDataDataModel", "FK_Genus_Type", "Genus")]
        public EntityCollection<Genus> Genus
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Genus>("RiftDataDataModel.FK_Genus_Type", "Genus");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Genus>("RiftDataDataModel.FK_Genus_Type", "Genus", value);
                }
            }
        }

        #endregion
    }

    #endregion
    
}
